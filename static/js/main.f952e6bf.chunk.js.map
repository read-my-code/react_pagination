{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pageCount","Math","ceil","arrayOfPages","className","classNames","disabled","href","onClick","prevPage","map","active","nextPage","items","App","useState","itemsPerPage","setItemsPerPage","page","setPage","itemsCount","length","start","end","visibleItems","slice","id","onChange","event","target","value","htmlFor","newPage","handleChangePage","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAYC,KAAKC,KAAKN,EAAQC,GAC9BM,EAAed,EAAW,EAAGW,GAcnC,OACE,qBAAII,UAAU,aAAd,UACE,oBAAIA,UAAWC,IACb,YACA,CAAEC,SAA0B,IAAhBR,IAFd,SAKE,mBACE,UAAQ,WACRM,UAAU,YACVG,KAAI,WAAMT,EAAc,GACxB,gBAAyC,IAAhBA,EACzBU,QAAS,WAxBjB,IAA8BC,KAwBcX,EAAc,IAvBxC,GACdC,EAAaU,IAiBX,oBAWDN,EAAaO,KAAI,SAAAjB,GAAC,OACjB,oBAEEW,UAAWC,IACT,YACA,CAAEM,OAAQb,IAAgBL,IAJ9B,SAOE,mBACE,UAAQ,WACRW,UAAU,YACVG,KAAI,WAAMd,GACVe,QAAS,WACPT,EAAaN,IALjB,SAQGA,KAdEA,MAmBT,oBAAIW,UAAWC,IACb,YACA,CAAEC,SAAUR,IAAgBE,IAF9B,SAKE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAyBT,IAAgBE,EACzCQ,QAAS,WAvDjB,IAA0BI,KAuDcd,EAAc,IAtDpCE,GACdD,EAAaa,IAgDX,wBCtEFC,EAAQxB,EAAW,EAAG,IACzBqB,KAAI,SAAAjB,GAAC,qBAAYA,MAEPqB,EAAgB,WAC3B,MAAwCC,mBAAS,KAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAiBA,IAAMC,EAAaP,EAAMQ,OACnBC,GAASJ,EAAO,IAAMF,EACtBO,EAAMD,IAASN,EAAeI,EAChCA,EAAaE,IAASN,EACpBQ,EAAeX,EAAMY,MAAMH,EAAOC,GAExC,OACE,sBAAKnB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWc,EADX,mBAC0BI,EAAQ,EADlC,cACyCC,EADzC,eACmDH,EADnD,OAIA,sBAAKhB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRsB,GAAG,kBACHtB,UAAU,eACVuB,SAnCiB,SACzBC,GAEIA,EAAMC,OAAOC,QAAUd,IACzBC,EAAgBW,EAAMC,OAAOC,OAC7BX,EAAQ,KA+BFW,MAAOd,EALT,UAOE,wBAAQc,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOC,QAAQ,kBAAkB3B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAAOwB,EACPvB,SAAUmB,EACVlB,YAAaoB,EACbnB,aAAc,SAACiC,IA7CrB,SAA0BA,GACpBd,IAASc,GACXb,EAAQa,GA4CJC,CAAiBD,MAGrB,6BACGR,EAAad,KAAI,SAACwB,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCtElCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f952e6bf.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pageCount = Math.ceil(total / perPage);\n  const arrayOfPages = getNumbers(1, pageCount);\n\n  function switchToPreviousPage(prevPage: number) {\n    if (prevPage >= 1) {\n      onPageChange(prevPage);\n    }\n  }\n\n  function switchToNextPage(nextPage: number) {\n    if (nextPage <= pageCount) {\n      onPageChange(nextPage);\n    }\n  }\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames(\n        'page-item',\n        { disabled: currentPage === 1 },\n      )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href={`#${currentPage - 1}`}\n          aria-disabled={'true' && currentPage === 1}\n          onClick={() => switchToPreviousPage(currentPage - 1)}\n        >\n          «\n        </a>\n      </li>\n\n      {arrayOfPages.map(n => (\n        <li\n          key={n}\n          className={classNames(\n            'page-item',\n            { active: currentPage === n },\n          )}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${n}`}\n            onClick={() => {\n              onPageChange(n);\n            }}\n          >\n            {n}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames(\n        'page-item',\n        { disabled: currentPage === pageCount },\n      )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={'true' && currentPage === pageCount}\n          onClick={() => switchToNextPage(currentPage + 1)}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState('5');\n  const [page, setPage] = useState(1);\n\n  const handleItemsPerPage = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    if (event.target.value !== itemsPerPage) {\n      setItemsPerPage(event.target.value);\n      setPage(1);\n    }\n  };\n\n  function handleChangePage(newPage: number) {\n    if (page !== newPage) {\n      setPage(newPage);\n    }\n  }\n\n  const itemsCount = items.length;\n  const start = (page - 1) * +itemsPerPage;\n  const end = start + +itemsPerPage > itemsCount\n    ? itemsCount : start + +itemsPerPage;\n  const visibleItems = items.slice(start, end);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${page} (items ${start + 1} - ${end} of ${itemsCount})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handleItemsPerPage}\n            value={itemsPerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={itemsCount}\n        perPage={+itemsPerPage}\n        currentPage={page}\n        onPageChange={(newPage) => {\n          handleChangePage(newPage);\n        }}\n      />\n      <ul>\n        {visibleItems.map((item) => (\n          <li data-cy=\"item\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}